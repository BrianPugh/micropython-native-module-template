#!/usr/bin/env python3
# Only use builtin libraries for this script
import re
import readline
import subprocess  # nosec
from argparse import ArgumentParser
from datetime import date
from pathlib import Path

parser = ArgumentParser(description="Prepares python project repository.")
parser.add_argument("--no-verify", action="store_true", help="Disable input verification.")
cli_args = parser.parse_args()

REPO = Path(__file__).parent


class col:  # noqa: N801
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


class BadResponseError(Exception):
    """User gave a response that does not agree with rule set."""


def run(cmds, **kwargs):
    """Run bash cmd without capturing stdout."""
    subprocess.run(cmds, capture_output=False, check=True, **kwargs)  # noqa: S603


def camel_to_snake(s):
    return "".join(["_" + c.lower() if c.isupper() else c for c in s]).lstrip("_")


def validate_input(prompt, validate=None, default=""):
    """Prompts user until response passes ``validate``."""
    while True:
        response = input(prompt + ": ")

        if not response:
            response = default

        if validate is None or cli_args.no_verify:
            break

        try:
            validate(response)
            break
        except BadResponseError as e:
            print(f'"{response}" {e}')
            print('To disable these validation checks, run "./bootstrap --no-verify"')
    return response


def git(*args):
    return subprocess.check_output(["git"] + list(args))  # noqa: S603


yes_terms = {"yes", "y", "true", "t", "1"}
no_terms = {"no", "n", "false", "f", "0"}


def is_boolean(response):
    response = response.lower()
    if response not in yes_terms.union(no_terms):
        raise BadResponseError


def is_identifier(response):
    if not response.isidentifier():
        raise BadResponseError("is not a valid python identifier.")


def is_lower(response):
    if response.lower() != response:
        raise BadResponseError("should be all lower case.")


def is_not_empty(response):
    if not response:
        raise BadResponseError("Cannot be empty.")


def good_module_name(response):
    is_identifier(response)
    is_lower(response)
    if "_" in response:
        raise BadResponseError("should not contain an underscore _")
    if len(response) > 20:
        raise BadResponseError("is too long (max 20 char limit).")


def good_class_name(response):
    is_identifier(response)
    if not response[0].isupper():
        raise BadResponseError("first letter should be capitalized.")


def remove_lines_in_file(file, *lines_to_remove):
    file = Path(file)
    lines_to_remove = {line + "\n" for line in lines_to_remove}
    with file.open("r+") as f:
        lines = f.readlines()
        f.seek(0)

        lines = [line for line in lines if line not in lines_to_remove]
        # Remove all trailing newlines
        while lines[-1] == "\n":
            lines.pop()

        for line in lines:
            f.write(line)

        f.truncate()


def git_remote_to_username_repo(git_remote_url):
    ssh_prefix = "git@github.com:"
    https_prefix = "https://github.com/"
    if git_remote_url.startswith(ssh_prefix):
        username_repo = git_remote_url[len(ssh_prefix) : -4]
    elif git_remote_url.startswith(https_prefix):
        username_repo = git_remote_url[len(https_prefix) : -4]
    else:
        raise ValueError(f"Unknown remote url {git_remote_url}")

    return username_repo.split("/", 1)


def add_to_pyproject(after, new_line, replace=False):
    if not new_line.endswith("\n"):
        new_line += "\n"

    if not after.endswith("\n"):
        after += "\n"

    with Path("pyproject.toml").open() as f:
        pyproject_contents = f.readlines()

    with Path("pyproject.toml").open("w") as f:
        for line in pyproject_contents:
            if line == after:
                if not replace:
                    f.write(line)
                line = new_line
            f.write(line)


def main():
    replacements: dict[str, str] = {
        "CURRENT_YEAR_HERE": str(date.today().year),
    }

    git_remote_url = git("config", "--get", "remote.origin.url").decode().strip()
    try:
        (
            replacements["GIT_USERNAME"],
            replacements["GIT_REPONAME"],
        ) = git_remote_to_username_repo(git_remote_url)
    except ValueError:
        print("Unable to get github URL. You will manually have to replace GIT_USERNAME and GIT_REPONAME in README.rst")

    ########################
    # User Questions Begin #
    ########################
    replacements["YOUR_NAME_HERE"] = validate_input("Enter your name", is_not_empty)
    replacements["pythontemplate"] = validate_input("Python Module Name", good_module_name)
    ######################
    # User Questions End #
    ######################
    (REPO / "README_TEMPLATE.md").replace(REPO / "README.md")

    def replace(string):
        """Replace whole words only."""

        def _replace(match):
            return replacements[match.group(0)]

        # notice that the 'this' in 'thistle' is not matched
        pattern = "|".join(rf"\b{re.escape(s)}\b" if " " not in s else re.escape(s) for s in replacements)
        return re.sub(pattern, _replace, string)

    files: list[Path] = list(REPO.rglob("*.py"))
    files.extend(REPO.rglob("*.yaml"))
    files.extend(REPO.rglob("*.rst"))
    files.extend(REPO.rglob("*.md"))
    files.append(Path("pyproject.toml"))
    files.append(Path(".gitignore"))
    files.append(Path("Makefile"))

    for file in files:
        contents = file.read_text()
        contents = replace(contents)
        file.write_text(contents)
        if file.stem in replacements:
            dst = file.with_name(replacements[file.stem] + file.suffix)
            file.replace(dst)

    # Delete this script
    Path(__file__).unlink()

    git("add", "-A")
    git("commit", "-m", "bootstrap from template", "--no-verify")

    print(col.OKGREEN)
    print("Bootstrapping complete. Changes committed. Please run:")
    print("    git push")
    print(col.ENDC)


if __name__ == "__main__":
    main()
